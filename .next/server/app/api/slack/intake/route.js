(()=>{var e={};e.id=57,e.ids=[57],e.modules={846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},1630:e=>{"use strict";e.exports=require("http")},1645:e=>{"use strict";e.exports=require("net")},1997:e=>{"use strict";e.exports=require("punycode")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},4075:e=>{"use strict";e.exports=require("zlib")},4631:e=>{"use strict";e.exports=require("tls")},4735:e=>{"use strict";e.exports=require("events")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},5511:e=>{"use strict";e.exports=require("crypto")},5591:e=>{"use strict";e.exports=require("https")},5739:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>_,routeModule:()=>$,serverHooks:()=>I,workAsyncStorage:()=>h,workUnitAsyncStorage:()=>v});var a={};r.r(a),r.d(a,{POST:()=>y});var o=r(6559),s=r(8088),n=r(7719),i=r(2190);let l=require("node:crypto");var u=r.n(l);let c=require("node:buffer");var p=r(6345);let d=process.env.SLACK_SIGNING_SECRET,f=process.env.SLACK_BOT_TOKEN,S=process.env.WEBHOOK_SECRET,k="https://dagitoru-aimtg.vercel.app",g="https://tqeprgfaybkvknmzeraj.supabase.co",m=process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,w=null;async function x(e,t){if(!d)return console.error("[verifySlackRequest] Slack Signing Secret is not defined."),!1;let r=e.headers.get("x-slack-signature"),a=e.headers.get("x-slack-request-timestamp");if(!r||!a)return console.warn("[verifySlackRequest] Missing signature or timestamp headers."),!1;let o=Math.floor(Date.now()/1e3)-300;if(parseInt(a,10)<o)return console.warn("[verifySlackRequest] Timestamp is too old."),!1;let s=`v0:${a}:${t}`,n=`v0=${u().createHmac("sha256",d).update(s,"utf8").digest("hex")}`;try{return u().timingSafeEqual(c.Buffer.from(n,"utf8"),c.Buffer.from(r,"utf8"))}catch(e){return console.error("[verifySlackRequest] Error during timingSafeEqual:",e),!1}}async function y(e){let t,r;console.log(`[${new Date().toISOString()}] /api/slack/intake: Request received.`);let a=e.clone(),o=e.clone(),s=await a.text(),n=new i.NextRequest(e.url,{headers:e.headers,body:c.Buffer.from(s),method:e.method});if(!await x(n,s))return console.warn(`[${new Date().toISOString()}] /api/slack/intake: Slack request verification failed.`),i.NextResponse.json({error:"Request verification failed"},{status:403});console.log(`[${new Date().toISOString()}] /api/slack/intake: Slack request verification successful.`);let l=await o.formData(),u=l.get("file"),p=l.get("payload_json");if(!u||!p)return console.warn(`[${new Date().toISOString()}] /api/slack/intake: Missing file or payload_json.`),i.NextResponse.json({error:"Missing file or payload_json"},{status:400});let{name:d,type:g}=u;try{t=JSON.parse(p)}catch(e){return console.error(`[${new Date().toISOString()}] /api/slack/intake: Failed to parse payload_json.`,e),i.NextResponse.json({error:"Invalid payload_json format."},{status:400})}let m=t?.event?.files?.[0]?.id;if(!m)return console.warn(`[${new Date().toISOString()}] /api/slack/intake: File ID not found in payload_json (expected at event.files[0].id).`),i.NextResponse.json({error:"File ID not found in payload_json"},{status:400});if(console.log(`[${new Date().toISOString()}] /api/slack/intake: Extracted fileId: ${m}`),!f)return console.error(`[${new Date().toISOString()}] /api/slack/intake: Missing SLACK_BOT_TOKEN for files.info API call.`),i.NextResponse.json({error:"Server configuration error for Slack API call"},{status:500});try{console.log(`[${new Date().toISOString()}] /api/slack/intake: Calling Slack files.info for fileId: ${m}`);let e=await fetch(`https://slack.com/api/files.info?file=${m}`,{method:"GET",headers:{Authorization:`Bearer ${f}`}});if(!e.ok){let t=await e.text();return console.error(`[${new Date().toISOString()}] /api/slack/intake: Slack files.info API call failed. Status: ${e.status}, Body: ${t}`),i.NextResponse.json({error:"Failed to get file info from Slack",details:t},{status:e.status})}let t=await e.json();if(!(r=t?.file?.url_private_download))return console.warn(`[${new Date().toISOString()}] /api/slack/intake: url_private_download not found in files.info response. Response:`,JSON.stringify(t)),i.NextResponse.json({error:"url_private_download not found in Slack file info"},{status:400});console.log(`[${new Date().toISOString()}] /api/slack/intake: Successfully fetched url_private_download: ${r}`)}catch(e){return console.error(`[${new Date().toISOString()}] /api/slack/intake: Error calling Slack files.info API: ${e instanceof Error?e.message:String(e)}`),i.NextResponse.json({error:"Error fetching file info from Slack"},{status:500})}if(!k||!S)return console.error(`[${new Date().toISOString()}] /api/slack/intake: Missing NEXT_PUBLIC_APP_URL or WEBHOOK_SECRET for internal API call.`),i.NextResponse.json({error:"Server configuration error for internal API call"},{status:500});console.log(`[${new Date().toISOString()}] /api/slack/intake: Requesting upload URL from /api/upload-url.`);let y=await fetch(`${k}/api/upload-url`,{method:"POST",headers:{Authorization:`Bearer ${S}`,"Content-Type":"application/json"},body:JSON.stringify({fileName:d,contentType:g})});if(!y.ok){let e=await y.text();return console.error(`[${new Date().toISOString()}] /api/slack/intake: Failed to get upload URL. Status: ${y.status}, Body: ${e}`),i.NextResponse.json({error:"Failed to get upload URL",details:e},{status:y.status})}let{uploadUrl:$,storagePath:h}=await y.json();console.log(`[${new Date().toISOString()}] /api/slack/intake: Received uploadUrl: ${$}, storagePath: ${h}`),console.log(`[${new Date().toISOString()}] /api/slack/intake: Fetching file from Slack: ${r}`);let v=await fetch(r,{headers:{Authorization:`Bearer ${f}`}});if(!v.ok||!v.body){let e=await v.text();return console.error(`[${new Date().toISOString()}] /api/slack/intake: Failed to download Slack file. Status: ${v.status}, Body: ${e}`),i.NextResponse.json({error:"Failed to download Slack file",details:e},{status:v.status})}console.log(`[${new Date().toISOString()}] /api/slack/intake: Successfully fetched file stream from Slack.`),console.log(`[${new Date().toISOString()}] /api/slack/intake: Streaming upload to Supabase: ${$}`);let I=await fetch($,{method:"PUT",headers:{"Content-Type":g},body:v.body});if(!I.ok){let e=await I.text();return console.error(`[${new Date().toISOString()}] /api/slack/intake: Failed to upload to Supabase. Status: ${I.status}, Body: ${e}`),i.NextResponse.json({error:"Failed to upload to Supabase",details:e},{status:I.status})}if(console.log(`[${new Date().toISOString()}] /api/slack/intake: Successfully uploaded to Supabase. Path: ${h}`),!w)return console.error(`[${new Date().toISOString()}] /api/slack/intake: Supabase client not initialized for DB operation.`),i.NextResponse.json({error:"Server configuration error: Supabase client not available for DB."},{status:500});let _={original_file_name:d,slack_file_url:r,storage_path:h,status:"uploaded",consultant_name:t.consultantName??null,company_name:t.companyName??null,company_type:t.companyType??null,company_problem:t.companyIssues??null,meeting_date:t.meetingDate??null,meeting_count:t.meetingCount??null,meeting_type:t.meetingType??null,support_area:t.supportArea??null};console.log(`[${new Date().toISOString()}] /api/slack/intake: Inserting task into DB:`,_);let{error:O}=await w.from("transcription_tasks").insert(_);return O?(console.error(`[${new Date().toISOString()}] /api/slack/intake: Failed to insert task to DB:`,O),i.NextResponse.json({error:"Failed to insert task",details:O.message},{status:500})):(console.log(`[${new Date().toISOString()}] /api/slack/intake: Task inserted to DB successfully.`),i.NextResponse.json({message:"Upload successful and task created",storagePath:h}))}g&&m?w=(0,p.UU)(g,m):console.error("[intake/route.ts] Missing Supabase URL or anon key env vars.");let $=new o.AppRouteRouteModule({definition:{kind:s.RouteKind.APP_ROUTE,page:"/api/slack/intake/route",pathname:"/api/slack/intake",filename:"route",bundlePath:"app/api/slack/intake/route"},resolvedPagePath:"C:\\Dagitoru-mtglog\\app\\api\\slack\\intake\\route.ts",nextConfigOutput:"",userland:a}),{workAsyncStorage:h,workUnitAsyncStorage:v,serverHooks:I}=$;function _(){return(0,n.patchFetch)({workAsyncStorage:h,workUnitAsyncStorage:v})}},6487:()=>{},7910:e=>{"use strict";e.exports=require("stream")},8335:()=>{},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},9428:e=>{"use strict";e.exports=require("buffer")},9551:e=>{"use strict";e.exports=require("url")}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),a=t.X(0,[297,190,345],()=>r(5739));module.exports=a})();