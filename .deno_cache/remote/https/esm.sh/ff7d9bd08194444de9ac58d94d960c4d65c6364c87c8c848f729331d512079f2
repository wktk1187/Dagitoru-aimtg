/**
 * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.
 *
 * @example
 *    let reconnectTimer = new Timer(() => this.connect(), function(tries){
 *      return [1000, 5000, 10000][tries - 1] || 10000
 *    })
 *    reconnectTimer.scheduleTimeout() // fires after 1000
 *    reconnectTimer.scheduleTimeout() // fires after 5000
 *    reconnectTimer.reset()
 *    reconnectTimer.scheduleTimeout() // fires after 1000
 */
export default class Timer {
    callback: Function;
    timerCalc: Function;
    timer: number | undefined;
    tries: number;
    constructor(callback: Function, timerCalc: Function);
    reset(): void;
    scheduleTimeout(): void;
}
//# sourceMappingURL=timer.d.ts.map

// denoCacheMetadata={"headers":{"access-control-allow-origin":"*","server":"cloudflare","content-type":"application/typescript; charset=utf-8","cache-control":"public, max-age=31536000, immutable","date":"Mon, 19 May 2025 00:30:27 GMT","content-length":"764","age":"317446","last-modified":"Wed, 15 Jan 2025 01:47:55 GMT","cf-cache-status":"HIT","cf-ray":"941f7c5e98e196a6-KIX","alt-svc":"h3=\":443\"; ma=86400"},"url":"https://esm.sh/@supabase/realtime-js@2.11.2/dist/module/lib/timer.d.ts","time":1747614627}