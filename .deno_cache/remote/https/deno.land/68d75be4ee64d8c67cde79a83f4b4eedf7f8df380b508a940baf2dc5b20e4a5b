// Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.

export const ERROR_WHILE_MAPPING_MESSAGE = "Threw while mapping.";

/**
 * pooledMap transforms values from an (async) iterable into another async
 * iterable. The transforms are done concurrently, with a max concurrency
 * defined by the poolLimit.
 *
 * If an error is thrown from `iterableFn`, no new transformations will begin.
 * All currently executing transformations are allowed to finish and still
 * yielded on success. After that, the rejections among them are gathered and
 * thrown by the iterator in an `AggregateError`.
 *
 * @example
 * ```typescript
 * import { pooledMap } from "https://deno.land/std@$STD_VERSION/async/pool.ts";
 *
 * const results = pooledMap(
 *   2,
 *   [1, 2, 3],
 *   (i) => new Promise((r) => setTimeout(() => r(i), 1000)),
 * );
 *
 * for await (const value of results) {
 *   // ...
 * }
 * ```
 *
 * @param poolLimit The maximum count of items being processed concurrently.
 * @param array The input array for mapping.
 * @param iteratorFn The function to call for every item of the array.
 */
export function pooledMap<T, R>(
  poolLimit: number,
  array: Iterable<T> | AsyncIterable<T>,
  iteratorFn: (data: T) => Promise<R>,
): AsyncIterableIterator<R> {
  // Create the async iterable that is returned from this function.
  const res = new TransformStream<Promise<R>, R>({
    async transform(
      p: Promise<R>,
      controller: TransformStreamDefaultController<R>,
    ) {
      try {
        const s = await p;
        controller.enqueue(s);
      } catch (e) {
        if (
          e instanceof AggregateError &&
          e.message == ERROR_WHILE_MAPPING_MESSAGE
        ) {
          controller.error(e as unknown);
        }
      }
    },
  });
  // Start processing items from the iterator
  (async () => {
    const writer = res.writable.getWriter();
    const executing: Array<Promise<unknown>> = [];
    try {
      for await (const item of array) {
        const p = Promise.resolve().then(() => iteratorFn(item));
        // Only write on success. If we `writer.write()` a rejected promise,
        // that will end the iteration. We don't want that yet. Instead let it
        // fail the race, taking us to the catch block where all currently
        // executing jobs are allowed to finish and all rejections among them
        // can be reported together.
        writer.write(p);
        const e: Promise<unknown> = p.then(() =>
          executing.splice(executing.indexOf(e), 1)
        );
        executing.push(e);
        if (executing.length >= poolLimit) {
          await Promise.race(executing);
        }
      }
      // Wait until all ongoing events have processed, then close the writer.
      await Promise.all(executing);
      writer.close();
    } catch {
      const errors = [];
      for (const result of await Promise.allSettled(executing)) {
        if (result.status == "rejected") {
          errors.push(result.reason);
        }
      }
      writer.write(Promise.reject(
        new AggregateError(errors, ERROR_WHILE_MAPPING_MESSAGE),
      )).catch(() => {});
    }
  })();
  return res.readable[Symbol.asyncIterator]();
}

// denoCacheMetadata={"headers":{"cache-control":"public, max-age=31536000, immutable","date":"Thu, 06 Feb 2025 12:09:15 GMT","age":"8770873","vary":"Accept-Encoding, Origin","access-control-allow-origin":"*","cross-origin-resource-policy":"same-origin","accept-ranges":"bytes","x-amz-server-side-encryption":"AES256","content-type":"application/typescript; charset=utf-8","referrer-policy":"strict-origin-when-cross-origin","x-cache":"Hit from cloudfront","last-modified":"Mon, 06 Feb 2023 23:43:18 GMT","etag":"\"054b9681bb4efd6a0aca8e1fd92c5c64\"","x-amz-cf-pop":"SIN52-P1","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","content-length":"3202","server-timing":"fetchSource;dur=8","x-amz-version-id":"qngTPCc64Pe48vE.Qm6ikbUVFZhu1ACG","strict-transport-security":"max-age=63072000; includeSubDomains; preload","cross-origin-opener-policy":"same-origin","x-content-type-options":"nosniff","x-amz-cf-id":"kxcu52bi2_HOT7ukARQ0EcMtcxLKLmHvEt2IS3rZU1N7iP5imvIQ-Q==","server":"deno/gcp-asia-southeast1","x-amz-replication-status":"COMPLETED","via":"http/2 edgeproxy-h","cross-origin-embedder-policy":"same-origin","x-frame-options":"DENY"},"url":"https://deno.land/std@0.177.0/async/pool.ts","time":1747614627}